/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/cards": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cards.id"];
          created_at?: parameters["rowFilter.cards.created_at"];
          name?: parameters["rowFilter.cards.name"];
          description?: parameters["rowFilter.cards.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cards"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cards */
          cards?: definitions["cards"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cards.id"];
          created_at?: parameters["rowFilter.cards.created_at"];
          name?: parameters["rowFilter.cards.name"];
          description?: parameters["rowFilter.cards.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cards.id"];
          created_at?: parameters["rowFilter.cards.created_at"];
          name?: parameters["rowFilter.cards.name"];
          description?: parameters["rowFilter.cards.description"];
        };
        body: {
          /** cards */
          cards?: definitions["cards"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/lanes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lanes.id"];
          created_at?: parameters["rowFilter.lanes.created_at"];
          name?: parameters["rowFilter.lanes.name"];
          description?: parameters["rowFilter.lanes.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["lanes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** lanes */
          lanes?: definitions["lanes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lanes.id"];
          created_at?: parameters["rowFilter.lanes.created_at"];
          name?: parameters["rowFilter.lanes.name"];
          description?: parameters["rowFilter.lanes.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lanes.id"];
          created_at?: parameters["rowFilter.lanes.created_at"];
          name?: parameters["rowFilter.lanes.name"];
          description?: parameters["rowFilter.lanes.description"];
        };
        body: {
          /** lanes */
          lanes?: definitions["lanes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/lanes_cards_users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lanes_cards_users.id"];
          created_at?: parameters["rowFilter.lanes_cards_users.created_at"];
          lane_id?: parameters["rowFilter.lanes_cards_users.lane_id"];
          card_id?: parameters["rowFilter.lanes_cards_users.card_id"];
          user_id?: parameters["rowFilter.lanes_cards_users.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["lanes_cards_users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** lanes_cards_users */
          lanes_cards_users?: definitions["lanes_cards_users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lanes_cards_users.id"];
          created_at?: parameters["rowFilter.lanes_cards_users.created_at"];
          lane_id?: parameters["rowFilter.lanes_cards_users.lane_id"];
          card_id?: parameters["rowFilter.lanes_cards_users.card_id"];
          user_id?: parameters["rowFilter.lanes_cards_users.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.lanes_cards_users.id"];
          created_at?: parameters["rowFilter.lanes_cards_users.created_at"];
          lane_id?: parameters["rowFilter.lanes_cards_users.lane_id"];
          card_id?: parameters["rowFilter.lanes_cards_users.card_id"];
          user_id?: parameters["rowFilter.lanes_cards_users.user_id"];
        };
        body: {
          /** lanes_cards_users */
          lanes_cards_users?: definitions["lanes_cards_users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/substeps": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.substeps.id"];
          created_at?: parameters["rowFilter.substeps.created_at"];
          name?: parameters["rowFilter.substeps.name"];
          description?: parameters["rowFilter.substeps.description"];
          step_id?: parameters["rowFilter.substeps.step_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["substeps"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** substeps */
          substeps?: definitions["substeps"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.substeps.id"];
          created_at?: parameters["rowFilter.substeps.created_at"];
          name?: parameters["rowFilter.substeps.name"];
          description?: parameters["rowFilter.substeps.description"];
          step_id?: parameters["rowFilter.substeps.step_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.substeps.id"];
          created_at?: parameters["rowFilter.substeps.created_at"];
          name?: parameters["rowFilter.substeps.name"];
          description?: parameters["rowFilter.substeps.description"];
          step_id?: parameters["rowFilter.substeps.step_id"];
        };
        body: {
          /** substeps */
          substeps?: definitions["substeps"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/substeps_users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.substeps_users.id"];
          created_at?: parameters["rowFilter.substeps_users.created_at"];
          substep_id?: parameters["rowFilter.substeps_users.substep_id"];
          user_id?: parameters["rowFilter.substeps_users.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["substeps_users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** substeps_users */
          substeps_users?: definitions["substeps_users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.substeps_users.id"];
          created_at?: parameters["rowFilter.substeps_users.created_at"];
          substep_id?: parameters["rowFilter.substeps_users.substep_id"];
          user_id?: parameters["rowFilter.substeps_users.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.substeps_users.id"];
          created_at?: parameters["rowFilter.substeps_users.created_at"];
          substep_id?: parameters["rowFilter.substeps_users.substep_id"];
          user_id?: parameters["rowFilter.substeps_users.user_id"];
        };
        body: {
          /** substeps_users */
          substeps_users?: definitions["substeps_users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  cards: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
  };
  lanes: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
  };
  lanes_cards_users: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `lanes.id`.<fk table='lanes' column='id'/>
     */
    lane_id?: number;
    /** Format: bigint */
    card_id?: number;
    /** Format: uuid */
    user_id?: string;
  };
  substeps: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `cards.id`.<fk table='cards' column='id'/>
     */
    step_id?: number;
  };
  substeps_users: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `substeps.id`.<fk table='substeps' column='id'/>
     */
    substep_id?: number;
    /** Format: uuid */
    user_id?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description cards */
  "body.cards": definitions["cards"];
  /** Format: bigint */
  "rowFilter.cards.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.cards.created_at": string;
  /** Format: text */
  "rowFilter.cards.name": string;
  /** Format: text */
  "rowFilter.cards.description": string;
  /** @description lanes */
  "body.lanes": definitions["lanes"];
  /** Format: bigint */
  "rowFilter.lanes.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.lanes.created_at": string;
  /** Format: text */
  "rowFilter.lanes.name": string;
  /** Format: text */
  "rowFilter.lanes.description": string;
  /** @description lanes_cards_users */
  "body.lanes_cards_users": definitions["lanes_cards_users"];
  /** Format: bigint */
  "rowFilter.lanes_cards_users.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.lanes_cards_users.created_at": string;
  /** Format: bigint */
  "rowFilter.lanes_cards_users.lane_id": string;
  /** Format: bigint */
  "rowFilter.lanes_cards_users.card_id": string;
  /** Format: uuid */
  "rowFilter.lanes_cards_users.user_id": string;
  /** @description substeps */
  "body.substeps": definitions["substeps"];
  /** Format: bigint */
  "rowFilter.substeps.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.substeps.created_at": string;
  /** Format: text */
  "rowFilter.substeps.name": string;
  /** Format: text */
  "rowFilter.substeps.description": string;
  /** Format: bigint */
  "rowFilter.substeps.step_id": string;
  /** @description substeps_users */
  "body.substeps_users": definitions["substeps_users"];
  /** Format: bigint */
  "rowFilter.substeps_users.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.substeps_users.created_at": string;
  /** Format: bigint */
  "rowFilter.substeps_users.substep_id": string;
  /** Format: uuid */
  "rowFilter.substeps_users.user_id": string;
}

export interface operations {}

export interface external {}
